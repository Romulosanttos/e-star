-- MySQL Script generated by MySQL Workbench
-- Sat Nov  5 15:22:57 2016
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- -----------------------------------------------------
-- Schema estartho_bdunp
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `estartho_bdunp` ;

-- -----------------------------------------------------
-- Schema estartho_bdunp
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `estartho_bdunp` DEFAULT CHARACTER SET latin1 ;
USE `estartho_bdunp` ;

-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Curso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Curso` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Curso` (
  `idCurso` INT(11) NOT NULL AUTO_INCREMENT,
  `nomeCurso` VARCHAR(45) CHARACTER SET 'latin1' NOT NULL,
  PRIMARY KEY (`idCurso`))
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `nomeCurso_UNIQUE` ON `estartho_bdunp`.`Curso` (`nomeCurso` ASC);

CREATE UNIQUE INDEX `idCurso_UNIQUE` ON `estartho_bdunp`.`Curso` (`idCurso` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Aluno`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Aluno` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Aluno` (
  `idAluno` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `matricula` CHAR(9) CHARACTER SET 'latin1' NOT NULL,
  `email` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `login` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `senha` VARCHAR(20) CHARACTER SET 'latin1' NOT NULL,
  `idCursoFK` INT(11) NOT NULL,
  PRIMARY KEY (`idAluno`),
  CONSTRAINT `FKCurso_Aluno`
    FOREIGN KEY (`idCursoFK`)
    REFERENCES `estartho_bdunp`.`Curso` (`idCurso`))
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKCurso_Aluno` ON `estartho_bdunp`.`Aluno` (`idCursoFK` ASC);

CREATE UNIQUE INDEX `idAluno_UNIQUE` ON `estartho_bdunp`.`Aluno` (`idAluno` ASC);

CREATE UNIQUE INDEX `matricula_UNIQUE` ON `estartho_bdunp`.`Aluno` (`matricula` ASC);

CREATE UNIQUE INDEX `email_UNIQUE` ON `estartho_bdunp`.`Aluno` (`email` ASC);

CREATE UNIQUE INDEX `login_UNIQUE` ON `estartho_bdunp`.`Aluno` (`login` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Professor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Professor` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Professor` (
  `idProfessor` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `matricula` VARCHAR(6) CHARACTER SET 'latin1' NOT NULL,
  `email` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `login` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `senha` VARCHAR(20) CHARACTER SET 'latin1' NOT NULL,
  PRIMARY KEY (`idProfessor`))
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `idProfessor_UNIQUE` ON `estartho_bdunp`.`Professor` (`idProfessor` ASC);

CREATE UNIQUE INDEX `matricula_UNIQUE` ON `estartho_bdunp`.`Professor` (`matricula` ASC);

CREATE UNIQUE INDEX `login_UNIQUE` ON `estartho_bdunp`.`Professor` (`login` ASC);

CREATE UNIQUE INDEX `email_UNIQUE` ON `estartho_bdunp`.`Professor` (`email` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Agendamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Agendamento` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Agendamento` (
  `idAgendamento` INT(11) NOT NULL AUTO_INCREMENT,
  `motivo` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `dataHora` DATETIME NOT NULL,
  `idProfessorFK` INT(11) NULL DEFAULT NULL,
  `idAlunoFK` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idAgendamento`),
  CONSTRAINT `FKAluno_Agendamento`
    FOREIGN KEY (`idAlunoFK`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`),
  CONSTRAINT `FKProfessor_Agendamento`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessor_Agendamento` ON `estartho_bdunp`.`Agendamento` (`idProfessorFK` ASC);

CREATE INDEX `FKAluno_Agendamento` ON `estartho_bdunp`.`Agendamento` (`idAlunoFK` ASC);

CREATE UNIQUE INDEX `idAgendamento_UNIQUE` ON `estartho_bdunp`.`Agendamento` (`idAgendamento` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`LinhaPesquisa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`LinhaPesquisa` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`LinhaPesquisa` (
  `idLinhaPesquisa` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `idCursoFK` INT(11) NOT NULL,
  PRIMARY KEY (`idLinhaPesquisa`),
  CONSTRAINT `FKCurso_LinhaPesquisa`
    FOREIGN KEY (`idCursoFK`)
    REFERENCES `estartho_bdunp`.`Curso` (`idCurso`))
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKCursoLinhaPesquisa` ON `estartho_bdunp`.`LinhaPesquisa` (`idCursoFK` ASC);

CREATE UNIQUE INDEX `idLinhaPesquisa_UNIQUE` ON `estartho_bdunp`.`LinhaPesquisa` (`idLinhaPesquisa` ASC);

CREATE UNIQUE INDEX `LinhaPesquisa_UNIQUE` ON `estartho_bdunp`.`LinhaPesquisa` (`nome` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`TCC`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`TCC` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`TCC` (
  `idTCC` INT(11) NOT NULL AUTO_INCREMENT,
  `titulo` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `resumo` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `statusTCC` TINYINT(1) NOT NULL COMMENT '1 - Finalizado\n2 - Pendente\n3 - Negado\n4 - Aceite',
  `objetivo` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `justificativa` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `TCCTipo` TINYINT(1) NOT NULL,
  `idLinhaPesquisaFK` INT(11) NOT NULL,
  PRIMARY KEY (`idTCC`),
  CONSTRAINT `FKLinhaPesquisa_TCC`
    FOREIGN KEY (`idLinhaPesquisaFK`)
    REFERENCES `estartho_bdunp`.`LinhaPesquisa` (`idLinhaPesquisa`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKLinha_Pesquisa_TCC` ON `estartho_bdunp`.`TCC` (`idLinhaPesquisaFK` ASC);

CREATE UNIQUE INDEX `idTCC_UNIQUE` ON `estartho_bdunp`.`TCC` (`idTCC` ASC);

CREATE UNIQUE INDEX `titulo_UNIQUE` ON `estartho_bdunp`.`TCC` (`titulo` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Arquivo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Arquivo` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Arquivo` (
  `idArquivo` INT(11) NOT NULL AUTO_INCREMENT,
  `link` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  `versao` VARCHAR(45) NOT NULL COMMENT 'TCC 1\nTCC 2\nBanca\nFinal com correções\n',
  PRIMARY KEY (`idArquivo`),
  CONSTRAINT `FKTCC_Arquivo`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCCArquivo` ON `estartho_bdunp`.`Arquivo` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idArquivo_UNIQUE` ON `estartho_bdunp`.`Arquivo` (`idArquivo` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Atividade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Atividade` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Atividade` (
  `idAtividade` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `mes` DATE NOT NULL,
  `descricao` VARCHAR(250) CHARACTER SET 'latin1' NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  PRIMARY KEY (`idAtividade`),
  CONSTRAINT `FKTCC_Atividade`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCCAtividade` ON `estartho_bdunp`.`Atividade` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idAtividade_UNIQUE` ON `estartho_bdunp`.`Atividade` (`idAtividade` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Cronograma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Cronograma` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Cronograma` (
  `idCronograma` INT(11) NOT NULL AUTO_INCREMENT,
  `nomeatividade` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `porque` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `onde` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `quando` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `quem` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `como` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `quanto` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCronograma`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `idCronograma_UNIQUE` ON `estartho_bdunp`.`Cronograma` (`idCronograma` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`AtividadesCronograma`
-- -----------------------------------------------------
/*DROP TABLE IF EXISTS `estartho_bdunp`.`AtividadesCronograma` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`AtividadesCronograma` (
  `idAtividadesCronograma` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `idCronogramaFK` INT(11) NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  PRIMARY KEY (`idAtividadesCronograma`),
  CONSTRAINT `FKCronograma_AtividadesCronograma`
    FOREIGN KEY (`idCronogramaFK`)
    REFERENCES `estartho_bdunp`.`Cronograma` (`idCronograma`),
  CONSTRAINT `FKTCC_AtividadesCronograma`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKCronograma_AtividadesCronograma` ON `estartho_bdunp`.`AtividadesCronograma` (`idCronogramaFK` ASC);

CREATE INDEX `FKTCC_AtividadesCronograma` ON `estartho_bdunp`.`AtividadesCronograma` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idAtividadesCronograma_UNIQUE` ON `estartho_bdunp`.`AtividadesCronograma` (`idAtividadesCronograma` ASC);

*/
-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Componentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Componentes` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Componentes` (
  `idProfessorFK` INT(11) NOT NULL,
  `idAlunoFK1` INT(11) NOT NULL,
  `idAlunoFK2` INT(11) NULL DEFAULT NULL,
  `idTCCFK` INT(11) NOT NULL,
  CONSTRAINT `FKAluno_Componente`
    FOREIGN KEY (`idAlunoFK1`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`),
  CONSTRAINT `FKAluno_Componente_2`
    FOREIGN KEY (`idAlunoFK2`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`),
  CONSTRAINT `FKProfessor_Componente`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`),
  CONSTRAINT `FKTCC_Componente`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessorComponente` ON `estartho_bdunp`.`Componentes` (`idProfessorFK` ASC);

CREATE INDEX `FKAlunoComponente` ON `estartho_bdunp`.`Componentes` (`idAlunoFK1` ASC);

CREATE INDEX `FKAlunoComponente_2` ON `estartho_bdunp`.`Componentes` (`idAlunoFK2` ASC);

CREATE INDEX `FKTCCComponente` ON `estartho_bdunp`.`Componentes` (`idTCCFK` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Unidade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Unidade` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Unidade` (
  `idUnidade` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUnidade`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idUnidade_UNIQUE` ON `estartho_bdunp`.`Unidade` (`idUnidade` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Sala`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Sala` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Sala` (
  `idSala` INT(11) NOT NULL AUTO_INCREMENT,
  `setor` VARCHAR(10) CHARACTER SET 'latin1' NOT NULL,
  `nome` VARCHAR (20) NOT NULL,
  `capacidade` INT NOT NULL,
  `idUnidadeFK` INT NOT NULL,
  PRIMARY KEY (`idSala`),
  CONSTRAINT `fk_Sala_Unidade`
    FOREIGN KEY (`idUnidadeFK`)
    REFERENCES `estartho_bdunp`.`Unidade` (`idUnidade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `fk_Sala_Unidade1_idx` ON `estartho_bdunp`.`Sala` (`idUnidadeFK` ASC);

CREATE UNIQUE INDEX `idSala_UNIQUE` ON `estartho_bdunp`.`Sala` (`idSala` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Reserva`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Reserva` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Reserva` (
  `idReserva` INT(11) NOT NULL AUTO_INCREMENT,
  `dataHora` DATETIME NOT NULL,
  `idProfessorFK` INT(11) NOT NULL,
  `idSalaFK` INT(11) NOT NULL,
  PRIMARY KEY (`idReserva`),
  CONSTRAINT `FKProfessor_Reserva`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`),
  CONSTRAINT `FKSalaAula_Reserva`
    FOREIGN KEY (`idSalaFK`)
    REFERENCES `estartho_bdunp`.`Sala` (`idSala`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessorReserva` ON `estartho_bdunp`.`Reserva` (`idProfessorFK` ASC);

CREATE INDEX `FKSalaAulaReserva` ON `estartho_bdunp`.`Reserva` (`idSalaFK` ASC);

CREATE UNIQUE INDEX `idReserva_UNIQUE` ON `estartho_bdunp`.`Reserva` (`idReserva` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Defesa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Defesa` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Defesa` (
  `idDefesa` INT(11) NOT NULL AUTO_INCREMENT,
  `data` DATETIME NOT NULL,
  `idTCCFK` INT(11) NOT NULL,
  `idReservaFK` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idDefesa`),
  CONSTRAINT `FKReserva_Defesa`
    FOREIGN KEY (`idReservaFK`)
    REFERENCES `estartho_bdunp`.`Reserva` (`idReserva`),
  CONSTRAINT `FKTCC_Defesa`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCCDefesa` ON `estartho_bdunp`.`Defesa` (`idTCCFK` ASC);

CREATE INDEX `FKReservaDefesa` ON `estartho_bdunp`.`Defesa` (`idReservaFK` ASC);

CREATE UNIQUE INDEX `idDefesa_UNIQUE` ON `estartho_bdunp`.`Defesa` (`idDefesa` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Erros`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Erros` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Erros` (
  `idErros` INT(11) NOT NULL AUTO_INCREMENT,
  `nomeErro` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `categoria` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  PRIMARY KEY (`idErros`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE UNIQUE INDEX `idErros_UNIQUE` ON `estartho_bdunp`.`Erros` (`idErros` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`ErrosTCC`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`ErrosTCC` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`ErrosTCC` (
  `idErrosTCC` INT(11) NOT NULL AUTO_INCREMENT,
  `idTCCFK` INT(11) NOT NULL,
  `idErrosFK` INT(11) NOT NULL,
  PRIMARY KEY (`idErrosTCC`),
  CONSTRAINT `FKErros_ErrosTCC`
    FOREIGN KEY (`idErrosFK`)
    REFERENCES `estartho_bdunp`.`Erros` (`idErros`),
  CONSTRAINT `FKTCC_ErrosTCC`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCCErrosTCC` ON `estartho_bdunp`.`ErrosTCC` (`idTCCFK` ASC);

CREATE INDEX `FKErrosErrosTCC` ON `estartho_bdunp`.`ErrosTCC` (`idErrosFK` ASC);

CREATE UNIQUE INDEX `idErrosTCC_UNIQUE` ON `estartho_bdunp`.`ErrosTCC` (`idErrosTCC` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Evento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Evento` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Evento` (
  `idEvento` INT(11) NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `dataHora` DATETIME NOT NULL,
  `local` VARCHAR(100) CHARACTER SET 'latin1' NOT NULL,
  `idProfessorFK` INT(11) NOT NULL,
  `idCursoFK` INT(11) NOT NULL,
  PRIMARY KEY (`idEvento`),
  CONSTRAINT `FKCurso_Evento`
    FOREIGN KEY (`idCursoFK`)
    REFERENCES `estartho_bdunp`.`Curso` (`idCurso`),
  CONSTRAINT `FKProfessor_Evento`
    FOREIGN KEY (`idProfessorFK`)
    REFERENCES `estartho_bdunp`.`Professor` (`idProfessor`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKProfessorEvento` ON `estartho_bdunp`.`Evento` (`idProfessorFK` ASC);

CREATE INDEX `FKCursoEvento` ON `estartho_bdunp`.`Evento` (`idCursoFK` ASC);

CREATE UNIQUE INDEX `idEvento_UNIQUE` ON `estartho_bdunp`.`Evento` (`idEvento` ASC);

CREATE UNIQUE INDEX `nome_UNIQUE` ON `estartho_bdunp`.`Evento` (`nome` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`Relatorio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`Relatorio` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`Relatorio` (
  `idRelatorio` INT(11) NOT NULL AUTO_INCREMENT,
  `data` DATETIME NOT NULL, 
  `apresentacaoNota` FLOAT NOT NULL,
  `fundamentacaoNota` FLOAT NOT NULL,
  `desenvolvimentoNota` FLOAT NOT NULL,
  `resultadosNota` FLOAT NOT NULL,
  `notaFinal` FLOAT NOT NULL,
  `TipoRelatorio` VARCHAR(50) CHARACTER SET 'latin1' NOT NULL,
  `apresentacaoComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `fundamentacaoComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `desenvolvimentoComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `resultadosComentario` VARCHAR(250) CHARACTER SET 'latin1' NULL,
  `idTCCFK` INT(11) NOT NULL,
  PRIMARY KEY (`idRelatorio`),
  CONSTRAINT `FKTCC_Relatorio`
    FOREIGN KEY (`idTCCFK`)
    REFERENCES `estartho_bdunp`.`TCC` (`idTCC`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = latin1
COLLATE = latin1_general_ci;

CREATE INDEX `FKTCCRelatorio` ON `estartho_bdunp`.`Relatorio` (`idTCCFK` ASC);

CREATE UNIQUE INDEX `idRelatorio_UNIQUE` ON `estartho_bdunp`.`Relatorio` (`idRelatorio` ASC);


-- -----------------------------------------------------
-- Table `estartho_bdunp`.`AlunoDefesa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `estartho_bdunp`.`AlunoDefesa` ;

CREATE TABLE IF NOT EXISTS `estartho_bdunp`.`AlunoDefesa` (
  `notaPostura` FLOAT NOT NULL,
  `notaComunicacao` FLOAT NOT NULL,
  `notaClareza` FLOAT NOT NULL,
  `notaDominio` FLOAT NOT NULL,
  `idAluno` INT(11) NOT NULL,
  `notaFinal` FLOAT NOT NULL,
  `posturaComentario` VARCHAR(200) NULL,
  `comunicacaoComentario` VARCHAR(45) NULL,
  `clarezaComentario` VARCHAR(45) NULL,
  `dominioComentario` VARCHAR(45) NULL,
  `idDefesa` INT(11) NOT NULL,
  CONSTRAINT `fk_AlunoDefesa_Aluno`
    FOREIGN KEY (`idAluno`)
    REFERENCES `estartho_bdunp`.`Aluno` (`idAluno`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AlunoDefesa_Defesa`
    FOREIGN KEY (`idDefesa`)
    REFERENCES `estartho_bdunp`.`Defesa` (`idDefesa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_AlunoDefesaAluno1_idx` ON `estartho_bdunp`.`AlunoDefesa` (`idAluno` ASC);

CREATE INDEX `fk_AlunoDefesa_Defesa1idx` ON `estartho_bdunp`.`AlunoDefesa` (`idDefesa` ASC);

USE `estartho_bdunp` ;



-- -----------------------------------------------------
-- ------------------PROCEDURES-------------------------
-- -----------------------------------------------------

-- -----------------------------------------------------
-- procedure sp_inserirAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAluno`;

DELIMITER $$
CREATE PROCEDURE `sp_inserirAluno`(nome varchar(100), matricula char(9), email varchar(50), login varchar(50), senha varchar(20), idCursoFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Aluno`
(`nome`,
`matricula`,
`email`,
`login`,
`senha`,
`idCursoFK`)
VALUES
(nome, matricula, email, login, senha, idCursoFK);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_alterarAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAluno`;

DELIMITER $$
CREATE PROCEDURE `sp_alterarAluno`(idAluno integer(11) ,nome varchar(100), matricula char(9), email varchar(50), login varchar(50), senha varchar(20), idCursoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Aluno`
SET
`nome` =nome,
`matricula` = matricula,
`email` = email,
`login` = login,
`senha` = senha,
`idCursoFK` = idCursoFK
WHERE `estartho_bdunp`.`Aluno`.`idAluno` = idAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_deletarAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAluno`;

DELIMITER $$
CREATE PROCEDURE `sp_deletarAluno`(idAluno integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Aluno`
WHERE `estartho_bdunp`.`Aluno`.`idAluno` = idAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_listarAluno
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAluno`;

DELIMITER $$
CREATE PROCEDURE `sp_listarAluno`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Aluno`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_buscarAlunoID
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_buscarAlunoID`;

DELIMITER $$
CREATE PROCEDURE `sp_buscarAlunoID`(idAluno integer(11))
BEGIN
SELECT * FROM `estartho_bdunp`.`Aluno` where `estartho_bdunp`.`Aluno`.`idAluno` = idAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_buscarAlunoMatricula
-- -----------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_buscarAlunoMatricula`;

DELIMITER $$
CREATE PROCEDURE `sp_buscarAlunoMatricula`(matricula char(9))
BEGIN
SELECT A.`idAluno`, A.`nome`, A.`matricula`, C.`nomeCurso`, A.`email`, A.`login`, A.`senha` FROM `estartho_bdunp`.`Aluno` as A INNER JOIN `estartho_bdunp`.`Curso` as C On A.`idCursoFK` = C.`idCurso` where A.`matricula` = matricula;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirProfessor
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirProfessor`;

DELIMITER $$
CREATE PROCEDURE `sp_inserirProfessor`(nome varchar(100), matricula char(6), email varchar(50), login varchar(50), senha varchar(20))
BEGIN
  INSERT INTO `estartho_bdunp`.`Professor`
(`nome`,
`matricula`,
`email`,
`login`,
`senha`
)
VALUES
(nome, matricula, email, login, senha);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarprofessor
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarProfessor`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarProfessor` (idProfessor integer(11), nome varchar(100), matricula integer(6), email varchar(50), login varchar(50), senha varchar(20))
BEGIN
  UPDATE `estartho_bdunp`.`Professor`
    SET 
`nome`= nome,
`matricula`= matricula,
`email`= email,
`login`=login,
`senha`= senha 
WHERE `estartho_bdunp`.`Professor`.`idProfessor`=idProfessor;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarProfessor
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarProfessor`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarProfessor`(idProfessor integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Professor`
WHERE `estartho_bdunp`.`Professor`.`idProfessor` = idProfessor;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarprofessor
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarProfessor`;

DELIMITER $$

CREATE PROCEDURE `sp_listarProfessor`()
BEGIN
SELECT * FROM`estartho_bdunp`.`Professor`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirCurso
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirCurso`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirCurso`(nomeCurso varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Curso`
(`nomeCurso`)
VALUES
(nomeCurso);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_aletrarCurso
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarCurso`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarCurso` (idCurso varchar(11), nomeCurso varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Curso`
    SET 
`nomeCurso`= nomeCurso 
WHERE `estartho_bdunp`.`Curso`.`idCurso`=idCurso;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarCurso
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarCurso`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarCurso`(idCurso integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Curso`
WHERE `estartho_bdunp`.`Curso`.`idCurso` = idCurso;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarCurso
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarCurso`;

DELIMITER $$

CREATE PROCEDURE `sp_listarCurso`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Curso`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAgendamento`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirAgendamento`(motivo varchar(100), dataHora DATETIME, idProfessorFK integer(11), idAlunoFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Agendamento`
(`motivo`,
`dataHora`,
`idProfessorFK`,
`idAlunoFK`
)
VALUES
(motivo, dataHora, idProfessorFK, idAlunoFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAgendamento`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarAgendamento` (idAgendamento integer(11), motivo varchar(100), dataHora DATETIME, idProfessorFK integer(11), idAlunoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Agendamento`
    SET 
`motivo`= motivo, 
`dataHora`= dataHora,
`idProfessorFK`= idProfessorFK,
`idAlunoFK`= idAlunoFK

WHERE `estartho_bdunp`.`Agendamento`.`idAgendamento`=idAgendamento;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAgendamento`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarAgendamento`(idAgendamento integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Agendamento`
WHERE `estartho_bdunp`.`Agendamento`.`idAgendamento` = idAgendamento;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarAgendamento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAgendamento`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarAgendamento`()
BEGIN
SELECT * FROM`estartho_bdunp`.`Agendamento`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirLinhaPesquisa
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirLinhaPesquisa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirLinhaPesquisa`(nome varchar(250), idCursoFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`LinhaPesquisa`
(`nome`,
`idCursoFK`
)
VALUES
(nome, ìdCursoFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarLinhaPesquisa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarLinhaPesquisa`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarLinhaPesquisa` (idLinhaPesquisa integer(11), nome varchar(250), idCursoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`LinhaPesquisa`
    SET 
`nome`= nome,
`idCursoFK`= idCursoFK

WHERE `estartho_bdunp`.`LinhaPesquisa`.`idLinhaPesquisa`= idLinhaPesquisa;
END$$

DELIMITER ; 


-- ------------------------------------------------------
-- procedure sp_deletarLinhaPesquisa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarLinhaPesquisa`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarLinhaPesquisa`(idLinhaPesquisa integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`LinhaPesquisa`
WHERE `estartho_bdunp`.`LinhaPesquisa`.`idLinhaPesquisa` = idLinhaPesquisa;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarLinhaPesquisa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarLinhaPesquisa`;

DELIMITER $$

CREATE PROCEDURE `sp_listarLinhaPesquisa`()
BEGIN
SELECT LA.`idLinhaPesquisa`, LA.`nome`, C.`nomeCurso` FROM `estartho_bdunp`.`LinhaPesquisa` AS LA INNER JOIN `estartho_bdunp`.`Curso` AS C on LA.`idCursoFK` = C.`idCurso` ORDER BY LA.`nome` ASC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirTCC`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirTCC`(titulo varchar(100), resumo varchar(250), statusTCC tinyint(1), objetivo varchar(100), justificativa varchar(100), TCCTipo tinyint(1), idLinhaPesquisaFK integer(11), idProfessorFK INTEGER (11), idAlunoFK1 INTEGER (11), idAlunoFK2 INTEGER (11))
BEGIN
  INSERT INTO `estartho_bdunp`.`TCC`
(`titulo`,
`resumo`,
`statusTCC`,
`objetivo`,
`justificativa`,
`TCCTipo`,
`idLinhaPesquisaFK`
)
VALUES
(titulo, resumo, statusTCC, objetivo, justificativa, TCCTipo, idLinhaPesquisaFK);

 INSERT INTO `estartho_bdunp`.`Componentes`
(`idTCCFK`,
 `idProfessorFK`,
 `idAlunoFK1`, 
 `idAlunoFK2` 
)

VALUES
(LAST_INSERT_ID(), idProfessorFK, idAlunoFK1, idAlunoFK2);

END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarTCC`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarTCC`(idTCC integer(11), titulo varchar(100), resumo varchar(250), statusTCC tinyint(1), objetivo varchar(100), justificativa varchar(100), TCCTipo tinyint(1), idLinhaPesquisaFK integer(11), idProfessorFK INTEGER (11), idAlunoFK1 INTEGER (11), idAlunoFK2 INTEGER (11))
BEGIN
  UPDATE `estartho_bdunp`.`TCC`
    SET 
`titulo` = titulo,
`resumo`= resumo,
`statusTCC`= statusTCC,
`objetivo`= objetivo,
`justificativa`= justificativa, 
`TCCTipo`= TCCTipo,
`idLinhaPesquisaFK`= idLinhaPesquisaFK
WHERE `estartho_bdunp`.`TCC`.`idTCC`=idTCC;

 UPDATE `estartho_bdunp`.`Componentes`
    SET
`idProfessorFK` = idProfessorFK , `idAlunoFK1` = idAlunoFK1, `idAlunoFK2` = idAlunoFK2 
WHERE `estartho_bdunp`.`Componentes`.`idTCCFK`= idTCC;
END $$
DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarTCC`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarTCC`(idTCC integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`TCC`
WHERE `estartho_bdunp`.`TCC`.`idTCC` = idTCC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarTCC`;

DELIMITER $$

CREATE PROCEDURE `sp_listarTCC`()
BEGIN
SELECT T.`idTCC`, T.`titulo`, T.`resumo`, T.`statusTCC`, T.`objetivo`, T.`justificativa`, T.`TCCTipo`, LP.`nome` AS `LinhaPesquisa`, P.`nome` AS `Professor`, A.`nome` AS `Aluno1`, A1.`nome` AS `Aluno2` FROM `estartho_bdunp`.`TCC` AS T 
INNER JOIN `estartho_bdunp`.`LinhaPesquisa` AS LP ON LP.`idLinhaPesquisa`= T.`idLinhaPesquisaFK` 
INNER JOIN `estartho_bdunp`.`Componentes` AS C ON T.`idTCC` = C.`idTCCFK` 
INNER JOIN `estartho_bdunp`.`Professor` AS P ON P.`idProfessor` = C.`idProfessorFK` 
INNER JOIN `estartho_bdunp`.`Aluno` AS A ON  A.`idAluno` = C.`idAlunoFK1`
INNER JOIN `estartho_bdunp`.`Aluno` AS A1 ON  A1.`idAluno` = C.`idAlunoFK2`
ORDER BY T.`titulo` ASC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirArquivo`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirArquivo`(link varchar(250), idTCCFK integer(11), versao varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Arquivo`
(`link`,
`idTCCFK`,
`versao`
)
VALUES
(link, idTCCFK, versao);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarArquivo`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarArquivo` (idArquivo integer(11), link varchar(250), idTCCFK integer(11), versao varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Arquivo`
    SET 
`link`= link,
`idTCCFK`= idTCCFK,
`versao`= versao
WHERE `estartho_bdunp`.`Arquivo`.`idArquivo`=idArquivo;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarArquivo`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarArquivo`(idArquivo integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Arquivo`
WHERE `estartho_bdunp`.`Arquivo`.`idArquivo` = idArquivo;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarArquivo
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarArquivo`;

DELIMITER $$

CREATE PROCEDURE `sp_listarArquivo`()
BEGIN
SELECT  A.`link`, T.`titulo` AS `TCC`, A.`versao` FROM `estartho_bdunp`.`Arquivo` AS A INNER JOIN `estartho_bdunp`.`TCC` AS T ON A.`idTCCFK` = T.`idTCC` WHERE A.`versao` = 'Final';
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAtividade`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirAtividade` (nome varchar(50), mes date, descricao varchar(250), idTCCFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Atividade`
(`nome`,
`mes`,
`descricao`,
`idTCCFK`
)
VALUES
(nome, mes, descricao, idTCCFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAtividade`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarAtividade` (idAtividade integer(11), nome varchar(50), mes date, descricao varchar(250), idTCCFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Atividade`
    SET 
`nome`= nome,
`mes`= mes,
`descricao`= descricao,
`idTCCFK`= idTCCFK 
WHERE `estartho_bdunp`.`Atividade`.`idAtividade`=idAtividade;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAtividade`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarAtividade`(idAtividade integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Atividade`
WHERE `estartho_bdunp`.`Atividade`.`idAtividade` = idAtividade;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarAtividade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAtividade`;

DELIMITER $$

CREATE PROCEDURE `sp_listarAtividade`()
BEGIN
SELECT A.`nome`, A.`mes`, A.`descricao`, T.`titulo` AS `TCC` FROM `estartho_bdunp`.`Atividade` AS A INNER JOIN `estartho_bdunp`.`TCC` AS T ON A.`idTCCFK` = T.`idTCC` ORDER BY A.`MES` DESC;
END$$

DELIMITER ;



-- ------------------------------------------------------
-- procedure sp_inserirCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirCronograma`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirCronograma`(nomeatividade varchar(100), porque varchar(100), onde varchar(100), quando varchar(100), quem varchar(100), como varchar(100), quanto varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Cronograma`
(`nomeatividade`,
`porque`,
`onde`,
`quando`,
`quem`,
`como`,
`quanto`
)
VALUES
(nomeatividade, porque, onde, quando, quem, como, quanto);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarCronograma
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarCronograma`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarCronograma` (idCronograma integer(11), nomeatividade varchar(100), porque varchar(100), onde varchar(100), quando varchar(100), quem varchar(100), como varchar(100), quanto varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Cronograma`
    SET 
`nomeatividade`= nomeatividade,
`porque`= porque,
`onde`= onde,
`quando`= quando,
`quem`= quem,
`como`= como,
`quanto`= quanto
WHERE `estartho_bdunp`.`Cronograma`.`idCronograma`=idCronograma;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarCronograma
-- ------------------------------------------------------
-- USE `estartho_bdunp`;
-- DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarCronograma`;
--
-- DELIMITER $$
-- USE `estartho_bdunp`$$
-- CREATE PROCEDURE `sp_deletarCronograma`(idCronograma integer(11))
-- BEGIN
-- DELETE FROM `estartho_bdunp`.`Cronograma`
-- WHERE `estartho_bdunp`.`Cronograma`.`idCronograma` = idCronograma;
-- END$$
--
-- ELIMITER ;

-- -------------------------------------------------------------------------------------------------------------------------------------------------------
-- procedure sp_listarCronograma ---------------------------------------------alteraçao neste prodecures
-- -------------------------------------------------------------------------------------------------------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarCronograma`;

DELIMITER $$

CREATE PROCEDURE `sp_listarCronograma`()
BEGIN
 SELECT C.`idCronograma` AS ID, C.`nomeatividade` AS NomeAtividade, C.`porque` AS Porque, 
 C.`onde` AS Onde, C.`quando` AS Quando, C.`quem` AS Quem, C.`como` AS Como, C.`quanto` AS Quanto
 FROM `estartho_bdunp`.`Cronograma` AS C;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAtividadesCronograma
-- ------------------------------------------------------
-- USE `estartho_bdunp`;
-- DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAtividadesCronograma`;

-- DELIMITER $$

-- CREATE PROCEDURE `sp_inserirAtividadesCronograma`(nome varchar(100), idCronogramaFK integer(11), idTCCFK integer(11))
-- BEGIN
  -- INSERT INTO `estartho_bdunp`.`AtividadesCronograma`
-- (`nome`,
-- `idCronogramaFK`,
-- `idTCCFK`
-- )
-- VALUES
-- (nome, idCronogramaFK, idTCCFK);
-- END$$

-- DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAtividadesCronograma
-- ------------------------------------------------------
-- USE `estartho_bdunp`;
-- DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAtividadesCronograma`;

-- DELIMITER $$
-- USE `estartho_bdunp`$$
-- CREATE PROCEDURE `sp_alterarAtividadesCronograma` (idAtividadesCronograma integer(11), nome varchar(100), idCronogramaFK integer(11), idTCCFK integer(11))
-- BEGIN
--   UPDATE `estartho_bdunp`.`AtividadesCronograma`
--    SET 
-- `nome`= nome,
-- `idCronogramaFK`= idCronogramaFK,
-- `idTCCFK`= idTCCFK
-- WHERE `estartho_bdunp`.`AtividadesCronograma`.`idAtividadesCronograma`=idAtividadesCronograma;
-- END$$

-- DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarAtividadesCronograma
-- ------------------------------------------------------
-- USE `estartho_bdunp`;
-- DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarAtividadesCronograma`;

-- DELIMITER $$

-- CREATE PROCEDURE `sp_deletarAtividadesCronograma`(idAtividadesCronograma integer(11))
-- BEGIN
-- DELETE FROM `estartho_bdunp`.`AtividadesCronograma`
-- WHERE `estartho_bdunp`.`AtividadesCronograma`.`idAtividadesCronograma` = idAtividadesCronograma;
-- END$$

-- DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarAtividadesCronograma
-- ------------------------------------------------------
-- USE `estartho_bdunp`;
-- DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAtividadesCronograma`;

-- DELIMITER $$
-- USE `estartho_bdunp`$$

-- CREATE PROCEDURE `sp_listarAtividadesCronograma`()
-- BEGIN
-- SELECT * FROM `estartho_bdunp`.`AtividadesCronograma`;
-- END$$

-- DELIMITER ;


/*-- ------------------------------------------------------
-- procedure sp_inserirComponentes
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirComponentes`(idProfessorFK integer(11), idAlunoFK1 integer(11), idAlunoFK2 integer(11), idTCCFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Componentes`
(`idProfessorFK`,
`idAlunoFK1`,
`idAlunoFK2`,
`idTCCFK`
)
VALUES
(idProfessorFK, idAlunoFK1, idAlunoFK2, idTCCFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarComponentes
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarComponentes` (idTCCFK integer(11), idProfessorFK integer(11), idAlunoFK1 integer(11), idAlunoFK2 integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Componentes`
    SET 
`idProfessorFK` = idProfessorFK,
`idAlunoFK1`= idAlunoFK1,
`idAlunoFK2`= idAlunoFK2,
`idTCCFK` = idTCCFK
WHERE `estartho_bdunp`.`Componentes`.`idTCCFK`=idTCCFK;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarComponentes 
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarComponentes`(idTCCFK integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Componentes`
WHERE `estartho_bdunp`.`Componentes`.`idTCCFK` = idTCCFK ;
END$$

DELIMITER ;

-- obs: TENTAR FAZER EFEITO CASCATA COM A TABELA TCC

-- ------------------------------------------------------
-- procedure sp_listarComponentes
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarComponentes`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarComponentes`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Componentes`
END$$

DELIMITER ;

-- obs: FAZER INNER JOIN COM PROFESSOR E ALUNO --------------
-- obs: FAZER INNER JOIN COM TCC  ---------------------------*/

-- ------------------------------------------------------
-- procedure sp_inserirUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirUnidade`;


DELIMITER $$

CREATE PROCEDURE `sp_inserirUnidade`(nome varchar(45))
BEGIN
  INSERT INTO `estartho_bdunp`.`Unidade`
(`nome`
)
VALUES
(nome);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarUnidade`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarUnidade` (idUnidade integer(11), nome varchar(45))
BEGIN
  UPDATE `estartho_bdunp`.`Unidade`
    SET 
`nome`= nome
WHERE `estartho_bdunp`.`Unidade`.`idUnidade`=idUnidade;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarUnidade`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarUnidade`(idUnidade integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Unidade`
WHERE `estartho_bdunp`.`Unidade`.`idUnidade` = idUnidade;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarUnidade
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarUnidade`;

DELIMITER $$

CREATE PROCEDURE `sp_listarUnidade`()
BEGIN
SELECT * FROM `estartho_bdunp`.`Unidade` ORDER BY nome ASC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirSala`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirSala`(setor varchar(10), nome varchar (20), capacidade integer, idUnidadeFK integer)
BEGIN
  INSERT INTO `estartho_bdunp`.`Sala`
(`setor`,
`nome`,
`capacidade`,
`idUnidadeFK`
)
VALUES
(setor, nome,capacidade, idUnidadeFK);
END$$

DELIMITER ;


-- ------------------------------------------------------
-- procedure sp_alterarSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarSala`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarSala` (idSala integer(11), setor varchar(10), nome varchar (20), capacidade integer, idUnidadeFK integer)
BEGIN
  UPDATE `estartho_bdunp`.`Sala`
    SET 
`setor`= setor,
`nome` = nome,
`capacidade`= capacidade,
`idUnidadeFK`= idUnidadeFK
WHERE `estartho_bdunp`.`Sala`.`idSala`=idSala;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarSala`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarSala`(idSala integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Sala`
WHERE `estartho_bdunp`.`Sala`.`idSala` = idSala;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarSala
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarSala`;

DELIMITER $$

CREATE PROCEDURE `sp_listarSala`()
BEGIN
SELECT U.`nome` AS `Unidade`, S.`setor` AS Setor, S.`nome` AS Sala, S.`capacidade`AS Capacidade , S.`idSala` AS ID FROM `estartho_bdunp`.`Sala` AS S
 INNER JOIN `estartho_bdunp`.`Unidade` AS U ON S.`idUnidadeFK` = U.`idUnidade` ORDER BY U.`nome` ASC, S.`nome` ASC;
END$$

DELIMITER ;
-- ------------------------------------------------------
-- procedure sp_inserirReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirReserva`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirReserva`(dataHora DATETIME, idProfessorFK integer(11), idSalaFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Reserva`
(`dataHora`,
`idProfessorFK`,
`idSalaFK`
)
VALUES
(dataHora, idProfessorFK, idSalaFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarReserva`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarReserva` (idReserva integer(11), dataHora DATETIME, idProfessorFK integer(11), idSalaFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Reserva`
    SET 
`dataHora`= dataHora,
`idProfessorFK`= idProfessorFK,
`idSalaFK`= idSalaFK
WHERE `estartho_bdunp`.`Reserva`.`idReserva`=idReserva;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarReserva`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarReserva`(idReserva integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Reserva`
WHERE `estartho_bdunp`.`Reserva`.`idReserva` = idReserva;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarReserva
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarReserva`;

DELIMITER $$

CREATE PROCEDURE `sp_listarReserva`()
BEGIN
SELECT R.`dataHora` AS `Data`, P.`nome` AS Professor, S.`nome` AS Sala, S.`setor` AS Setor, R.`idReserva` AS ID FROM `estartho_bdunp`.`Reserva` AS R
INNER JOIN `estartho_bdunp`.`Professor` AS P ON P.`idProfessor` = R.`idProfessorFK`
INNER JOIN `estartho_bdunp`.`Sala` AS S ON S.`idSala` = R.`idSalaFK`
ORDER BY dataHora DESC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP PROCEDURE IF EXISTS `estartho_bdunp`.`sp_inserirDefesa`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirDefesa`(DataDef DATETIME, idTCCFK integer(11), idReservaFK INT(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Defesa`
(`data`,
`idTCCFK`,
`idReservaFK`
)
VALUES
(DataDef, idTCCFK, idReservaFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP PROCEDURE IF EXISTS `estartho_bdunp`.`sp_alterarDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_alterarDefesa` (idDefesa integer(11), DataDef DATETIME, idTCCFK integer(11), idReservaFK INT(11))
BEGIN
  UPDATE `estartho_bdunp`.`Defesa`
    SET 
`data`= DataDef,
`idTCCFK`= idTCCFK,
`idReservaFK`= idReservaFK
WHERE `estartho_bdunp`.`Defesa`.`idDefesa`=idDefesa;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarDefesa`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarDefesa`(idDefesa integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Defesa`
WHERE `estartho_bdunp`.`Defesa`.`idDefesa` = idDefesa;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarDefesa`;

DELIMITER $$

CREATE PROCEDURE `sp_listarDefesa`()
BEGIN
SELECT D.`idDefesa`,D.`data`,T.`titulo` AS TCC, D.`idReservaFK` FROM `estartho_bdunp`.`Defesa` as D
INNER JOIN `estartho_bdunp`.`TCC` as T on T.`idTCC` = D.`idTCCFK`;
END$$

DELIMITER ;
-- ------------------------------------------------------
-- procedure sp_inserirErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirErros`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirErros`(nomeErro varchar(50), categoria varchar(100))
BEGIN
  INSERT INTO `estartho_bdunp`.`Erros`
(`nomeErro`,
`categoria`
)
VALUES
(nomeErro, categoria);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarErros`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarErros` (idErros integer(11), nomeErro varchar(50), categoria varchar(100))
BEGIN
  UPDATE `estartho_bdunp`.`Erros`
    SET 
`nomeErro`= nomeErro,
`categoria`= categoria
WHERE `estartho_bdunp`.`Erros`.`idErros`=idErros;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarErros`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_deletarErros`(idErros integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Erros`
WHERE `estartho_bdunp`.`Erros`.`idErros` = idErros;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarErros
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarErros`;

DELIMITER $$
USE `estartho_bdunp`$$

CREATE PROCEDURE `sp_listarErros`()
BEGIN
SELECT E.`idErros` AS ID, E.`nomeErro` AS `Nome do Erro`, E.`categoria` AS `Categoria do Erro` FROM `estartho_bdunp`.`Erros` AS E ORDER BY nomeErro ASC;
END$$

DELIMITER ;
-- ------------------------------------------------------
-- procedure sp_inserirErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirErrosTCC`;

DELIMITER $$
USE `estartho_bdunp`$$
CREATE PROCEDURE `sp_inserirErrosTCC`(idTCCFK integer(11), idErrosFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`ErrosTCC`
(`idTCCFK`,
`idErrosFK`
)
VALUES
(idTCCFK, idErrosFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarErrosTCC`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarErrosTCC` (idErrosTCC integer(11), idTCCFK integer(11), idErrosFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`ErrosTCC`
    SET 
`idTCCFK`= idTCCFK,
`idErrosFK`= idErrosFK
WHERE `estartho_bdunp`.`ErrosTCC`.`idErrosTCC`=idErrosTCC;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarErrosTCC`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarErrosTCC`(idErrosTCC integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`ErrosTCC`
WHERE `estartho_bdunp`.`ErrosTCC`.`idErrosTCC` = idErrosTCC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarErrosTCC
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarErrosTCC`;

DELIMITER $$

CREATE PROCEDURE `sp_listarErrosTCC`()
BEGIN
SELECT * FROM `estartho_bdunp`.`ErrosTCC`;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirEvento`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirEvento`(nome varchar(50), dataHora datetime, Localizacao varchar(100), idProfessorFK integer(11), idCursoFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Evento`
(`nome`,
`dataHora`,
`local`,
`idProfessorFK`,
`idCursoFK`
)
VALUES
(nome, dataHora, Localizacao, idProfessorFK, idCursoFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarEvento`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarEvento` (idEvento integer(11), nome varchar(50), dataHora datetime, Localizacao varchar(100), idProfessorFK integer(11), idCursoFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Evento`
    SET 
`nome`= nome,
`dataHora`= dataHora,
`local`= Localizacao,
`idProfessorFK`= idProfessorFK,
`idCursoFK`= idCursoFK 
WHERE `estartho_bdunp`.`Evento`.`idEvento`=idEvento;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarEvento`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarEvento`(idEvento integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Evento`
WHERE `estartho_bdunp`.`Evento`.`idEvento` = idEvento;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarEvento
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarEvento`;

DELIMITER $$

CREATE PROCEDURE `sp_listarEvento`()
BEGIN
SELECT E.`idEvento` AS ID, E.`nome` AS `Nome do Evento`, E.`dataHora` AS `Data e Hora`, E.`local` AS Localizaçao, P.`nome` AS Professor, C.`nomeCurso` AS Curso FROM `estartho_bdunp`.`Evento` AS E
INNER JOIN `estartho_bdunp`.`Professor` AS P ON P.`idProfessor` = E.`idProfessorFK`
INNER JOIN `estartho_bdunp`.`Curso` AS C ON C.`idCurso` = E.`idCursoFK`
ORDER BY E.`dataHora` DESC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirRelatorio
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirRelatorio`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirRelatorio`(apresentacaoNota FLOAT, dataH DATETIME, fundamentacaoNota FLOAT, desenvolvimentoNota FLOAT, resultadosNota FLOAT, notaFinal FLOAT, 
  TipoRelatorio varchar(50), apresentacaoComentario varchar(250), fundamentacaoComentario varchar(250), desenvolvimentoComentario varchar(250), 
  resultadosComentario varchar(250), idTCCFK integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`Relatorio`
(`apresentacaoNota`,
`data`,
`fundamentacaoNota`,
`desenvolvimentoNota`,
`resultadosNota`,
`notaFinal`,
`TipoRelatorio`, 
`apresentacaoComentario`,
`fundamentacaoComentario`,
`desenvolvimentoComentario`,
`resultadosComentario`,
`idTCCFK`
)
VALUES
(apresentacaoNota, dataH, fundamentacaoNota, desenvolvimentoNota, resultadosNota, notaFinal, TipoRelatorio, apresentacaoComentario, fundamentacaoComentario, desenvolvimentoComentario, resultadosComentario, idTCCFK);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarRelatorio
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarRelatorio`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarRelatorio` (idRelatorio integer(11), dataH DATETIME, apresentacaoNota FLOAT, fundamentacaoNota FLOAT, desenvolvimentoNota FLOAT, resultadosNota FLOAT, notaFinal FLOAT, 
  TipoRelatorio varchar(50), apresentacaoComentario varchar(250), fundamentacaoComentario varchar(250), desenvolvimentoComentario varchar(250), 
  resultadosComentario varchar(250), idTCCFK integer(11))
BEGIN
  UPDATE `estartho_bdunp`.`Relatorio`
    SET 
`apresentacaoNota`= apresentacaoNota,
`data`= dataH,
`fundamentacaoNota`= fundamentacaoNota,
`desenvolvimentoNota`= desenvolvimentoNota,
`resultadosNota`= resultadosNota,
`notaFinal`= notaFinal,
`TipoRelatorio`= TipoRelatorio, 
`apresentacaoComentario`= apresentacaoComentario,
`fundamentacaoComentario`= fundamentacaoComentario,
`desenvolvimentoComentario`= desenvolvimentoComentario,
`resultadosComentario`= resultadosComentario,
`idTCCFK`= idTCCFK
WHERE `estartho_bdunp`.`Relatorio`.`idRelatorio`=idRelatorio;
END$$

DELIMITER ; 

-- ------------------------------------------------------
-- procedure sp_deletarRelatorio
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_deletarRelatorio`;

DELIMITER $$

CREATE PROCEDURE `sp_deletarRelatorio`(idRelatorio integer(11))
BEGIN
DELETE FROM `estartho_bdunp`.`Relatorio`
WHERE `estartho_bdunp`.`Relatorio`.`idRelatorio` = idRelatorio;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarRelatorio
-- ------------------------------------------------------
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarRelatorio`;
DELIMITER $$

CREATE PROCEDURE `sp_listarRelatorio`()
BEGIN
SELECT T.`titulo` AS TCC , R.`data` AS `Data e Hora`, R.`apresentacaoNota` AS `Nota da Apresentacao`, R.`fundamentacaoNota` AS `Nota da Fundamentacao`, R.`desenvolvimentoNota` AS `Nota da Desenvolvimento`, R.`resultadosNota` AS `Resultados da Nota`, R.`notaFinal` AS `Nota Final`, 
R.`TipoRelatorio` AS `Tipo de Relatorio`, R.`apresentacaoComentario` AS `Comentario da Apresentacao`, R.`fundamentacaoComentario` AS `Comentario da Fundamentaçao`, R.`desenvolvimentoComentario` AS `Comentario da Desenvolvimento`, R.`resultadosComentario` AS `Comentario dos Resultados`
 FROM `estartho_bdunp`.`Relatorio` AS R
 INNER JOIN `estartho_bdunp`.`TCC` AS T ON T.`idTCC` = R.`idTCCFK` 
 ORDER BY R.`data` ASC, T.`titulo` ASC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_inserirAlunoDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_inserirAlunoDefesa`;

DELIMITER $$

CREATE PROCEDURE `sp_inserirAlunoDefesa`(notaPostura FLOAT, notaComunicacao FLOAT, notaClareza FLOAT, notaDominio FLOAT, idAluno integer(11), notaFinal FLOAT, 
 posturaComentario varchar(200), comunicacaoComentario varchar(45), clarezaComentario varchar(45), dominioComentario varchar(45), idDefesa integer(11))
BEGIN
  INSERT INTO `estartho_bdunp`.`AlunoDefesa`
(`notaPostura`,
`notaComunicacao`,
`notaClareza`,
`notaDominio`,
`idAluno`,
`notaFinal`,
`posturaComentario`,
`comunicacaoComentario`,
`clarezaComentario`,
`dominioComentario`,
`idDefesa`
)
VALUES
(notaPostura, notaComunicacao, notaClareza, notaDominio, idAluno, notaFinal, posturaComentario, comunicacaoComentario, clarezaComentario, dominioComentario, idDefesa);
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_alterarAlunoDefesa
-- ------------------------------------------------------
USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_alterarAlunoDefesa`;

DELIMITER $$

CREATE PROCEDURE `sp_alterarAlunoDefesa` (notaPostura FLOAT, notaComunicacao FLOAT, notaClareza FLOAT, notaDominio FLOAT, idAluno integer(11), notaFinal FLOAT, 
 posturaComentario varchar(200), comunicacaoComentario varchar(45), clarezaComentario varchar(45), dominioComentario varchar(45), idDefesa integer(11))

BEGIN
  UPDATE `estartho_bdunp`.`AlunoDefesa`
    SET 
`notaPostura`= notaPostura,
`notaComunicacao`= notaComunicacao,
`notaClareza`= notaClareza,
`notaDominio`= notaDominio,
`idAluno`= idAluno,
`notaFinal`= notaFinal,
`posturaComentario`= posturaComentario,
`comunicacaoComentario`= comunicacaoComentario,
`clarezaComentario`= clarezaComentario,
`dominioComentario`= dominioComentario,
`idDefesa`= idDefesa
WHERE `estartho_bdunp`.`AlunoDefesa`.`idTCC`=idTCC;
END$$

DELIMITER ; 


-- ------------------------------------------------------
-- procedure sp_listarAlunoDefesa_idAlunosp
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAlunoDefesa_idAluno`;

DELIMITER $$

CREATE PROCEDURE `sp_listarAlunoDefesa_idAluno`()
BEGIN
SELECT * FROM `estartho_bdunp`.`AlunoDefesa`
order by idAluno ASC;
END$$

DELIMITER ;

-- ------------------------------------------------------
-- procedure sp_listarAlunoDefesa_Geral
-- ------------------------------------------------------

USE `estartho_bdunp`;
DROP procedure IF EXISTS `estartho_bdunp`.`sp_listarAlunoDefesa_Geral`;

DELIMITER $$

CREATE PROCEDURE `sp_listarAlunoDefesa_Geral`()
BEGIN
SELECT A.`nome` AS Aluno, AD.`notaPostura` AS `Nota Da Postura`, AD.`notaComunicacao` AS `Nota da Comunicacao`, AD.`notaClareza` AS `Nota da Clareza`, AD.`notaDominio` AS `Nota do Dominio`, AD.`notaFinal` AS `Nota Final`, AD.`posturaComentario` AS `Comentario da Postura`, 
AD.`comunicacaoComentario` AS `Comentario da Comunicaçao`, AD.`clarezaComentario` AS `Comentario da Clareza`, AD.`dominioComentario` AS `Comentario do Dominio`, AD.`idDefesa` AS ID
 FROM `estartho_bdunp`.`AlunoDefesa` AS AD 
 INNER JOIN `estartho_bdunp`.`Aluno` AS A ON A.`idAluno` = AD.`idAluno` 
 order by A.`nome` ASC;
END$$

DELIMITER ;





-- Teste de Procedures

-- call sp_inserirAluno('Aluno teste', '123456789', 'aluno@teste.com', 'aluno.Teste', '123456', 3);
-- call sp_listarAluno();
-- call sp_buscarAlunoID(1);
-- call sp_deletarAluno(1);
